{"version":3,"sources":["components/Card.jsx","services/api.js","services/storage.js","pages/Home.jsx","pages/Cart.jsx","pages/Checkout.jsx","components/ProductDetails.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","this","props","product","addToCart","thumbnail","title","price","id","free","shipping","free_shipping","data-testid","className","src","alt","type","onClick","to","pathname","state","Component","getCategories","a","fetch","result","data","json","getProductsFromCategoryAndQuery","categoryId","query","getCart","JSON","parse","localStorage","getItem","saveCart","cartArray","setItem","stringify","Home","inputText","target","name","value","setState","buttonClick","searchBar","category","loading","results","actualProduct","hasSearched","fetchCategories","categories","categoriesList","cartList","find","item","renderCategories","map","htmlFor","key","onChange","renderResults","length","includes","cart","placeholder","Cart","initialTotalPrice","totalPrice","forEach","elem","hasAvailable","filter","available_quantity","incrementProduct","addProduct","parseFloat","toFixed","decrementProduct","items","removeProduct","productList","splice","indexOf","uniques","Map","values","Checkout","handleChange","renderInput","label","cartItems","fullname","email","cpf","phone","cep","address","e","ProductDetails","saveToCart","location","inputValue","React","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa5931be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\nimport { Link } from 'react-router-dom';\n\nexport default class Card extends Component {\n  render() {\n    const { product, addToCart } = this.props;\n    const { thumbnail, title, price, id, shipping: { free_shipping: free } } = product;\n    return (\n      <div data-testid=\"product\" className=\"product-container\">\n        <h4>{ title }</h4>\n        <img src={ thumbnail } alt={ title } className=\"img-card\" />\n        <p>{`Preço: R$${price}`}</p>\n        <p\n          data-testid={ free && 'free-shipping' }\n        >\n          { free && 'free-shipping' }\n        </p>\n        <button\n          type=\"button\"\n          data-testid=\"product-add-to-cart\"\n          id={ id }\n          onClick={ addToCart }\n        >\n          Adicionar ao Carrinho\n        </button>\n\n        <Link\n          data-testid=\"product-detail-link\"\n          to={ {\n            pathname: `/ProductDetails/${id}`,\n            state: { product },\n          } }\n        >\n          Especificações Tecnicas\n        </Link>\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  addToCart: PropTypes.func.isRequired,\n  product: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","export async function getCategories() {\n  const result = await fetch('https://api.mercadolibre.com/sites/MLB/categories');\n  const data = result.json();\n  return data;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const result = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`);\n  const data = result.json();\n  return data;\n}\n","export function getCart() {\n  return JSON.parse(localStorage.getItem('shoppingCart')) || [];\n}\n\nexport function saveCart(cartArray) {\n  localStorage.setItem('shoppingCart', JSON.stringify(cartArray));\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/Card';\nimport { getCategories, getProductsFromCategoryAndQuery } from '../services/api';\nimport { getCart, saveCart } from '../services/storage';\nimport './Home.css';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    const cart = getCart(); // Pegando lista do storage\n\n    this.state = {\n      categoriesList: [],\n      searchBar: '',\n      actualProduct: [],\n      category: '',\n      cartList: cart,\n      loading: false,\n      hasSearched: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCategories();\n  }\n\n  inputText = ({ target }) => {\n    const { name, value, type } = target;\n\n    this.setState({ [name]: value }, () => {\n      if (type === 'radio') this.buttonClick();\n    });\n  }\n\n  buttonClick = async () => {\n    const { searchBar, category } = this.state;\n\n    this.setState({ loading: true });\n\n    const { results } = await getProductsFromCategoryAndQuery(category, searchBar);\n\n    this.setState({ actualProduct: results, loading: false, hasSearched: true });\n  }\n\n  fetchCategories = async () => {\n    const categories = await getCategories();\n    this.setState({ categoriesList: categories });\n  }\n\n  addToCart = ({ target: { id } }) => {\n    const { cartList, actualProduct } = this.state;\n    const product = actualProduct.find((item) => item.id === id);\n    saveCart([...cartList, product]); // Adicionado para salvar no storage\n    this.setState({ cartList: [...cartList, product] });\n  }\n\n  renderCategories = () => {\n    const { categoriesList } = this.state;\n    return categoriesList.map(({ id, name }) => (\n      <label htmlFor={ id } key={ id }>\n        <input\n          type=\"radio\"\n          data-testid=\"category\"\n          name=\"category\"\n          id={ id }\n          value={ id }\n          onChange={ this.inputText }\n        />\n        {name}\n      </label>\n    ));\n  }\n\n  renderResults = () => {\n    const { actualProduct, hasSearched, cartList } = this.state;\n    return actualProduct.length === 0\n      ? hasSearched && <h1>Nenhum produto foi encontrado</h1>\n      : (\n        actualProduct.map((product) => (<Card\n          product={ product }\n          id={ product.id }\n          data-testid={ cartList.includes(product.id)\n            ? 'shopping-cart-product-name'\n            : '' }\n          key={ product.id }\n          addToCart={ this.addToCart }\n        />))\n      );\n  }\n\n  render() {\n    const {\n      searchBar,\n      cartList,\n      loading,\n    } = this.state;\n    return (\n      <main>\n        <label htmlFor=\"search\">\n          <input\n            type=\"text\"\n            id=\"search\"\n            placeholder=\"Busca...\"\n            data-testid=\"query-input\"\n            name=\"searchBar\"\n            value={ searchBar }\n            onChange={ this.inputText }\n          />\n\n          <button\n            type=\"button\"\n            data-testid=\"query-button\"\n            onClick={ this.buttonClick }\n          >\n            Pesquisar\n          </button>\n\n          <p data-testid=\"home-initial-message\">\n            Digite algum termo de pesquisa ou escolha uma categoria.\n          </p>\n        </label>\n\n        <Link data-testid=\"shopping-cart-button\" to=\"/cart\">\n          Carrinho\n        </Link>\n        <span data-testid=\"shopping-cart-size\">\n          { cartList.length }\n        </span>\n\n        <div className=\"categories-products-div\">\n          <div className=\"categories\">{ this.renderCategories() }</div>\n          <div className=\"list-container\">\n            { loading ? <span>Carregando...</span> : this.renderResults() }\n          </div>\n\n        </div>\n      </main>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './Cart.css';\nimport { Link } from 'react-router-dom';\nimport { getCart, saveCart } from '../services/storage';\n\nexport default class Cart extends Component {\n  constructor(props) {\n    super(props);\n\n    const cart = getCart();\n    // hhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n    const uniques = [...new Map(cart.map((item) => [item.id, item])).values()];\n    this.state = {\n      cartList: cart,\n      items: uniques,\n      totalPrice: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.initialTotalPrice();\n  }\n\n  initialTotalPrice = () => {\n    let { totalPrice } = this.state;\n    const { cartList } = this.state;\n    cartList.forEach((elem) => {\n      (this.setState({ totalPrice: totalPrice += elem.price }));\n    });\n  }\n\n  hasAvailable = (item, cartList) => cartList.filter(({ id }) => id === item.id).length\n    < item.available_quantity;\n\n  incrementProduct = ({ target: { id } }) => {\n    const { cartList, totalPrice } = this.state;\n    const addProduct = cartList.find((elem) => elem.id === id);\n    if (this.hasAvailable(addProduct, cartList)) {\n      saveCart([...cartList, addProduct]);\n      this.setState({ cartList: [...cartList, addProduct] });\n      this.setState({\n        totalPrice: parseFloat((totalPrice + addProduct.price).toFixed(2)),\n      });\n    }\n  }\n\n  decrementProduct = ({ target: { id } }) => {\n    const { cartList, items, totalPrice } = this.state;\n    const removeProduct = cartList.find((elem) => elem.id === id);\n    const productList = cartList.filter((elem) => elem.id === id);\n    cartList.splice(cartList.indexOf(removeProduct), 1);\n    if (productList.length < 2) {\n      items.splice(items.indexOf(removeProduct), 1);\n      this.setState({ items });\n    }\n    saveCart([...cartList]);\n    this.setState({ cartList: [...cartList] });\n    this.setState({\n      totalPrice: parseFloat((totalPrice - removeProduct.price).toFixed(2)),\n    });\n  }\n\n  render() {\n    const { items, cartList, totalPrice } = this.state;\n    return (\n      <div className=\"body-cart-container\">\n        <header><h1>Seu Carrinho</h1></header>\n        <div className=\"cart-item-list\">\n          { (cartList.length === 0)\n            ? <p data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</p>\n            : (\n              items.map((item) => (\n                <div\n                  key={ item.id }\n                  data-testid=\"shopping-cart-product-name\"\n                  className=\"cart-item\"\n                >\n                  <h4>{ item.title }</h4>\n                  <img\n                    src={ item.thumbnail }\n                    alt={ item.title }\n                    className=\"img-item-cart\"\n                  />\n                  <p>{`Preço: R$${item.price}`}</p>\n                  <button\n                    type=\"button\"\n                    data-testid=\"product-increase-quantity\"\n                    onClick={ this.incrementProduct }\n                    id={ item.id }\n                  >\n                    +\n                  </button>\n                  <p\n                    data-testid=\"shopping-cart-product-quantity\"\n                  >\n                    {`Quantidade: ${\n                      cartList.filter(({ id }) => id === item.id).length\n                    }`}\n                  </p>\n                  <p>\n                    {`Quantidade disponível: ${item.available_quantity}`}\n                  </p>\n                  <div>\n                    <button\n                      type=\"button\"\n                      data-testid=\"product-decrease-quantity\"\n                      onClick={ this.decrementProduct }\n                      id={ item.id }\n                    >\n                      -\n                    </button>\n                  </div>\n                </div>\n              )))}\n        </div>\n        <p>\n          Total: R$\n          { totalPrice }\n        </p>\n        <p>\n          {`Itens ${cartList.length}`}\n        </p>\n        <Link\n          to=\"/checkout\"\n          data-testid=\"checkout-products\"\n        >\n          <button type=\"button\">Finalizar compra</button>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { getCart } from '../services/storage';\n\nexport default class Checkout extends Component {\n  constructor() {\n    super();\n\n    const cart = getCart();\n\n    this.state = {\n      cartItems: cart,\n      fullname: '',\n      email: '',\n      cpf: '',\n      phone: '',\n      cep: '',\n      address: '',\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  renderInput = (label, data, value) => (\n    <label htmlFor={ data }>\n      {label}\n      <input\n        type=\"text\"\n        data-testid={ `checkout-${data}` }\n        id={ data }\n        name={ data }\n        value={ value }\n        onChange={ this.handleChange }\n      />\n    </label>\n  )\n\n  render() {\n    const { cartItems, fullname, email, cpf, phone, cep, address } = this.state;\n    return (\n      <div>\n        {cartItems.map((e) => <p key={ e.id }>{e.title}</p>)}\n        {/* ADD PRODUCT CART TOTAL LIST */}\n        <form>\n          {this.renderInput('Nome completo: ', 'fullname', fullname)}\n          <br />\n          {this.renderInput('Email: ', 'email', email)}\n          <br />\n          {this.renderInput('CPF: ', 'cpf', cpf)}\n          <br />\n          {this.renderInput('Telefone: ', 'phone', phone)}\n          <br />\n          {this.renderInput('CEP: ', 'cep', cep)}\n          <br />\n          {this.renderInput('Endereço: ', 'address', address)}\n          <br />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getCart, saveCart } from '../services/storage';\n\nclass ProductDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { location: { state: { product } } } = this.props;\n    const cartList = getCart();\n\n    this.state = {\n      product,\n      cartList,\n      inputValue: '',\n    };\n  }\n\n  inputText = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  saveToCart = () => {\n    const { cartList, product } = this.state;\n    saveCart([...cartList, product]);\n    this.setState({ cartList: [...cartList, product] });\n  }\n\n  render() {\n    const { product, cartList, inputValue } = this.state;\n    const { title, price, thumbnail, shipping: { free_shipping: free } } = product;\n    return (\n      <>\n        <h4 data-testid=\"product-detail-name\">{title}</h4>\n        <img src={ thumbnail } alt={ `foto ${title}` } />\n        <p>{price}</p>\n        <button\n          type=\"button\"\n          data-testid=\"product-detail-add-to-cart\"\n          onClick={ this.saveToCart }\n        >\n          Adicionar ao Carrinho\n        </button>\n        <Link data-testid=\"shopping-cart-button\" to=\"/cart\">\n          Carrinho\n        </Link>\n        <span data-testid=\"shopping-cart-size\">\n          { cartList.length }\n        </span>\n        <p\n          data-testid={ free && 'free-shipping' }\n        >\n          { free && 'free-shipping' }\n        </p>\n        <form>\n          <textarea\n            data-testid=\"product-detail-evaluation\"\n            value={ inputValue }\n            name=\"inputValue\"\n            onChange={ this.inputText }\n          />\n          <button\n            type=\"button\"\n          >\n            Enviar\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  location: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default ProductDetails;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport './App.css';\nimport Cart from './pages/Cart';\nimport Checkout from './pages/Checkout';\nimport ProductDetails from './components/ProductDetails';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={ Home } />\n          <Route path=\"/cart\" component={ Cart } />\n          <Route path=\"/checkout\" component={ Checkout } />\n          <Route exact path=\"/ProductDetails/:id\" component={ ProductDetails } />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}